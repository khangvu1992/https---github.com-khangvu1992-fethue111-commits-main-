"use client";

import { useState } from "react";
import * as XLSX from "xlsx";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

interface HsCode {
  maHs: string;
  moTa: string;
}

export default function Page() {
  const [danhSach, setDanhSach] = useState<HsCode[]>([]);
  const [openThemTay, setOpenThemTay] = useState(false);
  const [openExcel, setOpenExcel] = useState(false);

  const [form, setForm] = useState<HsCode>({
    maHs: "",
    moTa: "",
  });

  // X·ª≠ l√Ω thay ƒë·ªïi input/textarea
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // L∆∞u m√£ HS ƒë∆∞·ª£c nh·∫≠p th·ªß c√¥ng
  const handleLuuTay = () => {
    if (!form.maHs.trim()) return;
    setDanhSach([...danhSach, form]);
    setForm({ maHs: "", moTa: "" });
    setOpenThemTay(false);
  };

  // X·ª≠ l√Ω khi ch·ªçn file Excel
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (evt) => {
      const bstr = evt.target?.result;
      const workbook = XLSX.read(bstr, { type: "binary" });
      const sheet = workbook.Sheets[workbook.SheetNames[0]];
      const json = XLSX.utils.sheet_to_json<any>(sheet);

      const parsed: HsCode[] = json.map((row: any) => ({
        maHs: row.maHs || "",
        moTa: row.moTa || "",
      }));

      setDanhSach((prev) => [...prev, ...parsed]);
      setOpenExcel(false);
    };

    reader.readAsBinaryString(file);
  };

  // T·∫°o v√† t·∫£i file Excel m·∫´u
  const handleTaiFileMau = () => {
    const sampleData = [
      { maHs: "010120", moTa: "Th·ªãt b√≤ ƒë√¥ng l·∫°nh kh√¥ng x∆∞∆°ng" },
    ];

    const worksheet = XLSX.utils.json_to_sheet(sampleData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "HsCodeTrongDiem");

    XLSX.writeFile(workbook, "mau_hs_code_trong_diem.xlsx");
  };

  return (
    <div className="p-4 space-y-4">
      {/* Nh√≥m n√∫t ch·ª©c nƒÉng */}
      <div className="flex space-x-4">
        {/* Nh·∫≠p tay */}
        <Dialog open={openThemTay} onOpenChange={setOpenThemTay}>
          <DialogTrigger asChild>
            <Button>‚ûï Nh·∫≠p tay</Button>
          </DialogTrigger>
          <DialogContent>
            <DialogTitle>Th√™m m√£ HS th·ªß c√¥ng</DialogTitle>
            <div className="space-y-3">
              <Label>M√£ HS</Label>
              <Input
                name="maHs"
                value={form.maHs}
                onChange={handleChange}
                placeholder="V√≠ d·ª•: 010120"
              />
              <Label>M√¥ t·∫£</Label>
              <Textarea
                name="moTa"
                value={form.moTa}
                onChange={handleChange}
                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ m√£ HS"
              />
              <Button onClick={handleLuuTay}>L∆∞u</Button>
            </div>
          </DialogContent>
        </Dialog>

        {/* Nh·∫≠p t·ª´ Excel */}
        <Dialog open={openExcel} onOpenChange={setOpenExcel}>
          <DialogTrigger asChild>
            <Button>üì• Nh·∫≠p t·ª´ Excel</Button>
          </DialogTrigger>
          <DialogContent>
            <DialogTitle>Nh·∫≠p danh s√°ch m√£ HS t·ª´ Excel</DialogTitle>
            <div className="space-y-3">
              <Label>Ch·ªçn file Excel</Label>
              <Input type="file" accept=".xlsx,.xls" onChange={handleFileChange} />
            </div>
          </DialogContent>
        </Dialog>

        {/* T·∫£i file m·∫´u */}
        <Button onClick={handleTaiFileMau}>üìÑ T·∫£i file m·∫´u</Button>
      </div>

      {/* Hi·ªÉn th·ªã danh s√°ch m√£ HS */}
      <div className="border p-4 rounded-md bg-gray-50">
        <h3 className="font-bold mb-2">Danh s√°ch m√£ HS ƒë√£ th√™m:</h3>
        {danhSach.length === 0 ? (
          <p className="text-sm italic text-gray-500">Ch∆∞a c√≥ d·ªØ li·ªáu.</p>
        ) : (
          <ul className="space-y-1 text-sm list-disc pl-5">
            {danhSach.map((item, idx) => (
              <li key={idx}>
                <strong>{item.maHs}</strong>: {item.moTa}
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}
